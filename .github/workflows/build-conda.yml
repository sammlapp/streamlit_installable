name: Build Conda Installers

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          # - os: windows-latest
          #   app: audioclipreviewer
          #   arch: x64
          # # Linux x64  
          # - os: ubuntu-latest
          #   app: audioclipreviewer
          #   arch: x64
          # # macOS Intel (x86_64)
          # - os: macos-13
          #   app: audioclipreviewer
          #   arch: x64
          # macOS Apple Silicon (arm64)
          - os: macos-14
            app: audioclipreviewer
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Miniconda (Intel/Linux/Windows)
      if: matrix.arch == 'x64'
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.11
        activate-environment: build-env
        environment-file: constructor/AudioClipReviewer/environment.yml
        miniconda-version: latest

    - name: Setup Miniconda (Apple Silicon)
      if: matrix.arch == 'arm64'
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.11
        activate-environment: build-env
        environment-file: constructor/AudioClipReviewer/environment.yml
        # miniconda-version: latest # instead, specify installer url
        installer-url: https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh

    - name: Verify Architecture and Conda Installation
      shell: bash -l {0}
      run: |
        echo "=== System Information ==="
        echo "Runner OS: ${{ matrix.os }}"
        echo "Target Architecture: ${{ matrix.arch }}"
        echo "System Architecture: $(uname -m)"
        echo "System Platform: $(uname -a)"
        echo ""
        echo "=== Conda Information ==="
        conda info
        echo ""
        echo "=== Python Information ==="
        python -c "import platform; print(f'Python Platform: {platform.platform()}'); print(f'Python Machine: {platform.machine()}'); print(f'Python Architecture: {platform.architecture()}')"

    - name: Install constructor
      shell: bash -l {0}
      run: |
        conda install -c anaconda constructor

    - name: Build installer - AudioClipReviewer
      if: matrix.app == 'audioclipreviewer'
      shell: bash -l {0}
      run: |
        constructor constructor/AudioClipReviewer/

    - name: Build installer - BMZInferenceGUI
      if: matrix.app == 'bmzinferencegui'
      shell: bash -l {0}
      run: |
        constructor constructor/BMZInferenceGUI/

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-windows-installer
        path: "*.exe"

    - name: Upload macOS Intel artifacts
      if: matrix.os == 'macos-13'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-macos-intel-installer
        path: "*MacOSX*.sh"
        
    - name: Upload macOS Apple Silicon artifacts
      if: matrix.os == 'macos-14'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-macos-arm64-installer
        path: "*MacOSX*.sh"

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app }}-linux-installer
        path: "*.sh"

    - name: List build artifacts
      shell: bash -l {0}
      run: |
        echo "Built installers:"
        ls -la *.exe *.pkg *.sh 2>/dev/null || echo "No installers found in current directory"